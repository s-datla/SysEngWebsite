Website Content:

1 : Main Homepage - Main page with product features, Video of the final proof of concept application/system (this should show how it is set up and used, demonstrating its functionality; it is not a video of your April 27th presentation)

Heading : Project Brief

p: Our project brief is to design and develop a city pollution visualisation app for smartwatches that allows users to view key pollution statistics about their current location that may assist in decision making.

Heading : 
2 : Project Background
	
Heading: Why is pollution important?

p: Air quality in cities is a constant issue, affecting millions of people worldwide and responsible for many ailments. In London alone, 9,500 people die annually from long-term exposure to air pollution, exceeding expected values by twice the amount. In a recent study undertaken by researchers, two key pollutants were identified as the main offenders:
NO<sub>2</sub> and PM2.5 (fine particulates which are less than 2.5 micrometers in diameter).

Chart: var data = {
        labels: ["1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014"],
        datasets: [{
            label: "Sulphur Dioxide (million tonnes)",
            fill: false,
            backgroundColor: "rgba(255,165,0,0.2)",
            borderColor: "rgba(255,165,0,0.5)",
            pointBorderColor: "rgba(255,165,0,1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(255,165,0,1)",
            pointHoverBorderColor: "rgba(255,165,0,1)",
            pointHoverBorderWidth: 2,
            data: [2.66, 2.37, 2.01, 1.65, 1.63, 1.25, 1.22, 1.14, 1.01, 0.99, 0.83, 0.71, 0.67, 0.59, 0.49, 0.40, 0.42, 0.39, 0.44, 0.39, 0.31]
        }, {
            label: "Nitrogen Oxides (million tonnes)",
            fill: false,
            backgroundColor: "rgba(128,0,128,0.2)",
            borderColor: "rgba(128,0,128,0.5)",
            pointBorderColor: "rgba(128,0,128,1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(128,0,128,1)",
            pointHoverBorderColor: "rgba(128,0,128,1)",
            pointHoverBorderWidth: 2,
            data: [2.5, 2.37, 2.26, 2.08, 2.02, 1.9, 1.83, 1.81, 1.7, 1.67, 1.63, 1.62, 1.57, 1.5, 1.35, 1.17, 1.14, 1.06, 1.08, 1.04, 0.95]
        }, {
            label: "PM2.5 (million tonnes)",
            fill: false,
            backgroundColor: "rgba(34,139,34,0.2)",
            borderColor: "rgba(34,139,34,0.5)",
            pointBorderColor: "rgba(34,139,34,1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(34,139,34,1)",
            pointHoverBorderColor: "rgba(34,139,34,1)",
            pointHoverBorderWidth: 2,
            data: [0.180, 0.161, 0.161, 0.151, 0.145, 0.142, 0.130, 0.128, 0.112, 0.113, 0.110, 0.108, 0.107, 0.104, 0.104, 0.098, 0.106, 0.097, 0.103, 0.108, 0.105]
        }]
    };

Reference : https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/486085/Emissions_of_air_pollutants_statistical_release_2015_-_Final__2_.pdf, DEFRA National Statistics Release: Emissions of air pollutants in the UK, 1970 to 2014

p: The line graph on the left displays emissions levels for various pollutants for the UK (units are million tonnes). Due to efforts from various UK bodies to curb the levels of emissisons, we can see a gradual decline in pollution levels of major pollutants. However, in certain urban areas there are still times during the year when emissions are present in high quantities. This information is freely available from multiple sources, but not provided in a simple format for the general public to understand and adapt their daily activities to. 

p: There is an opportunity to provide an easy to use application that can achieve this task and assist users in modifying their behavious based on pollution statistics in their current location. For this reason, we have been tasked by the Intel Collaborative Research Institue, Microsoft Research, and UCL Engineering to design and develop such as system.

3 : Collaboration

Heading: 

4.1 : Design


Heading : Visualisations

p: As part of our intial research, our clients requested that we produce 10 - 15 potential visusalisations that could be implemented with detailed explanation of their workings and how we intend the user to work the interface.
Below are the intial visualisations that we produced with a brief explanation of how they will be implemented:

<iframe src="https://docs.google.com/document/d/1wTqJLBGv-ISDZSbAhzTV8aaBbnQPE9lWESp4H3dPM7c/pub?embedded=true"></iframe>

Heading : Initial Proof of Concept

p: After creating our individual visualisations, we had to decide on a final visualisation that we would actually implement and this is our Proof of Concept. The below images were made in the Android Studio and show the layouts of our individual views for our application.

Home Screen
<img src="../media/mockUpHomePage.png" height="254" width="304">

Air Quality Screen
<img src="../media/mockUpAir.png" height="261" width="284">

Social Pollution Screen
<img src="../media/mockUpSocial.png" height="265" width="296">

Sound Pollution Screen
<img src="../media/mockUpSound.png" height="252" width="298">

Traffic Levels Screen
<img src="../media/mockUpTraffic.png" height="250" width="283">

4.2 : Architectural Diagrams

4.3 : Testing

Heading : Smartwatch Application Testing 

p: When it came to testing the UI, as it was mostly a visual confirmation we decided to use manual testing. This included going through each process of the wearable app on the Android Studio ADK and confirming that the response messages that we added into the code corresponded to the actions that were undertaken. For each button pressed a "visual status" was displayed onto the Android Monitor allowing us to ensure that the buttons were doing the correct thing. Some screenshots of our UI testing can be seen below.

p: We also tested it on potential users, using an Android wear device. We asked each person who tested it to go through a series of steps and if each step implemented the correct UI change the results appeared to be working as planned.

Sub-Heading : Testing Method

Images: Smartphone Image 1, Image 2, Image 3, Image 4

p: Written after each step is the ideal outcome

li: Open the City Data Visualiser (The main menu should appear)
Tap on each of the none greyed icons in turn (Their corresponding scale pages should become visible)
For each scale page, tap the pollutant icon at the head of the page (The raw data values should become visible)
When on a pollutant page, swipe across the screen from left to right (This should take you back to the previous page)
Close the app and change your location slightly e.g. walk 10m away from your current point (This will count as a location change, new data will be sent and the app will reopen automatically)

p: This was tested on a small group of people and each time the results were correct and consistent
If we were to develop this project further we would have to put the app under a much more scrutinous testing system, checking that the UI has a consistent appearance although it may deployed on a large variety of devices. This would include seeing how robust the UI is to different screen sizes and shapes along with its running on different operating systems.

Heading : API Testing
p: Unit testing is done using Mochajs which you can install with 
npm install -g mocha 
We also make use of chaijs and the chaihttp plugin but these will be installed as dependencies.

p: To run the tests use mocha Mocha will run all files in the test directory.


5.1 : Requirements

Heading : Final Requirements 

Heading : Initial Requirements - MoSCoW

tr: Must

p: Use 3 pollution data sets updated at different rates ie live, daily, yearly
Display data visually on a smartwatch
Have a general view and a detailed view for each type of data
Interact with an android app
Must update as the user moves round the city and periodically or when the user requests a refresh
Have a clear simple UI

tr: Should

p: Have our own database to consolidate all other data sources into
Send notifications to users based on air quality and their quality preferences
Have synchronous and asynchronous connection to database
Store the last set of data offline in the app
Have clearly defined zones for the city

tr: Could

p: Include social data eg twitter posts or facebook etc.
Include traffic data
Allow user to select which information they want to display

tr: Would

p: Extend for use in other cities
Extend to a fully fledged android or web app for visualisations as well
Develop api for our database so others can use the data we have consolidated
Expand the number of data sources we are using

Heading : Use Cases

Name: StartReceivingDataUpdates
ID: UC1
Brief Description: The user starts the app to constantly receive air quality data based on location change
Primary Actor: User
Secondary Actor: None
Preconditions: The phone is connected to the Internet
Main Flow:
  1) The user opens the app on the smartphone.
  2) The app starts the data service that runs in the background and constantly send data to the smartwatch
Postconditions: The data service is started
Alternatie Flows: None

Name: CheckAirQuality
ID: UC2
Brief Description: The user uses the app to check the air quality of current location
Primary Actor: User
Secondary Actor: None
Preconditions: The phone is connected to the Internet and the data service is running
Main Flow:
 1) The app displays the main menu which contains for icons on the smartwatch
 2) The user clicks the Air icon
 3) The smartwatch displays the data for each pollutants in the form of coloured blocks
Postconditions: None
Alternatie Flows: None

Name: CheckAirQualityRawData
ID: UC3
Brief Description: The user uses the app to check the raw values of different air pollutants in current location
Primary Actor: User
Secondary Actor: None
Preconditions: The phone is connected to the Internet and the data service is running
Main Flow:
 1) The app displays the main menu which contains for icons on the smartwatch
 2) The user clicks the Air icon
 3) The smartwatch displays the data for each pollutants in the form of coloured blocks
 4) The user clicks the top bar of the current view
 5) The system displays the raw value for each air pollutant
Postconditions: None
Alternatie Flows: None


Name: StopReceivingDataUpdate
ID: UC4
Brief Description: The user decides to stop receiving data updates
Primary Actor: User
Secondary Actor: None
Preconditions: The phone is connected to the Internet and the data service is running
Main Flow:
 1) The user opens the app on the smartphone
 2) The user clicks the stop update button
 3) The app stops the data service that has been running in the background
Postconditions: The data service is stopped and the smartwatch will no longer receive data from the phone
Alternatie Flows:None


Name: RequestDataFromAPI
ID: UC5
Brief Description: The smartphone app requests air quality data from the backend API
Primary Actor: Smartphone app
Secondary Actor: None
Preconditions: The phone is connected to the Internet and the data service is running
Main Flow:
 1) The app detects a location change
 2) The app make a request with the current coordinates as query parameters to the API
 3) The API returns a json array that contains all the data with the nearest one as the first element
Postconditions: None
Alternatie Flows:None

5.2 : Development Plan

5.3 : Research 

Heading: DataSets Research

p: Our intial research revolved around the open source datasets available to use for the app, and we produced the following documentation:

<iframe src="https://docs.google.com/document/d/1M9yTj22eCtYQZTxIlQuN0-8bJN5Oz2cTI6RKFpdgIgQ/pub?embedded=true"></iframe>

We only looked into open source datasets available as we wanted to find datasets that were not difficult to access. Another criteria for selection was the relevance of the dataset, with our priorities on detailed Air quality statistics as well as location based data as our smartwatch app will rely on updates when entering a new zones within London.
Our initial conclusion from this research was three chosen datasets: 

li: London Air API - Provides Hourly and Weekly detailed updates on air pollution for all zones within London (JSON / XML)
Intel Smart Citizen API - Provides Live updates on air, light and noise pollution from a variety of Smart Citizen devices located around London (JSON / XML)
Data.Gov.UK - Provides Yearly updates on air and social ( e.g. Crime) pollution for all zones in London XML / PDF / Excel)

However, following some attempts to implement the Data.Gov.UK dataset, we found difficulties in easily parsing and transmitting the information to the API. This made us reconsider our choices for the third dataset, and after some further research we decided on OpenAQ - an open source pollution dataset that covers many major cities around the globe providing 

Heading: Technologies:

The following technologies have been selected by our team to be used for elements of our project: Java for the Smartwatch app and smartphone app programming, Node JS for the backend API, MongoDB for the data storage for the pollution data, Heroku used to host the app.
We have selected 3 data sets for our project that will provide us with a variety of different interval updates and detailed information about pollution types. This decision was made as these were the most relevant pollution data and the frequency of updates were spaced out enough for us to have reliable and relevant data for the user to use with a range of historical and live data.

In terms of hardware, we are aiming the app to be used with android smartphones and android wear smartwatch.Another hardware device being used is the Intel Smart Citizen, an Arduino board that contains many sensors to collect data about air, noise and light pollution. We are using this board as we are able to query the sensor values from all Smart Citizen boards within the London area.

<img src="../media/technologies.png" height="540" width="990" alt=""></section>

Heading : Possible Smartwatches
p: In our initial requirements meeting with the client, we were asked to look into suitable smartwatches to use as a template for our smartwatch app and that was within budget of the project.
<table>
<thead>
<tr>
<th>Smartwatch</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>Apple iWatch</td>
<td>
<ul>
<li>Square screen</li>
<li>340x272 pixels</li>
<li>Expensive (possibly out of budget)</li>
<li>iOS based, difficult to connect to Android Smartphone</li>
</ul>
</td>
</tr>
<tr>
<td>Samsung Galaxy Gear</td>
<td>
<ul>
<li>Square screen</li>
<li>360x480 pixels</li>
<li>Within budget</li>
<li>
Android Wear, Java Based, easy to connect to Android Smartphone
</li>
</ul>
</td>
</tr>
<tr>
<td>Microsoft Band</td>
<td>
<ul>
<li>Square screen</li>
<li>320x128 pixels</li>
<li>Within budget</li>
<li>
Small display size, may be difficult to produce visualisations for that size
</li>
</ul>
</td>
</tr>
<tr>
<td>Sony Smartwatch 3</td>
<td>
<ul>
<li>Square screen</li>
<li>320x320 pixels</li>
<li>Within budget</li>
<li>
Android Wear, Java Based, easy to connect to Android Smartphone
</li>
</ul>
</td>
</tr>
</tbody>
</table>

p: Based on the availability of the researched smartwatches and the prices, we have chosen to use the Sony Smartwatch 3. The large screen size of the smartwatch is beneficial to us as we have the ability to use a much larger area to display visualisations (320 X 320 px), allowing for much more detailed views.

5.4 : Prototypes


5.5 : Manuals

Heading : Server API Manual

Sub-Heading : Documentation

p: To assist you in understanding the frontend NodeJS API, we have prepared API documentation available at: 
a: href="http://citydatavisualiser.herokuapp.com/docs/"

Sub-Heading : Installation

p:Requires node and npm to be installed
To install the node dependancies run.

npm install
npm install -g nodemon
then start the app with npm start or npm debug to run with debugging messages

p: This will need a mongo database running as described below.

Sub-Heading : Database

p: We use MongoDB for the database. When running the app as development or test you will need to have a database running locally. Once you have mongo installed run it with mongod. If you wish to use a database that isn't running on the default port or isn't running locally change the URI in _config which is described below.

Sub-Heading : _config.js

p: This config file is used to specify the database URIs for development, testing and production. It will look something like this:

var config = {};

config.mongoURI = {
  development: 'localhost:27017/pollution',
  test: 'localhost:27017/test-data',
  production: process.env.DBUSER + ':' + process.env.DBPASS + '@ds055945.mlab.com:55945/pollution'
};

module.exports = config;

p: In our example we store the credentials for the production database as environment variables on the machine the app is running on.
it is then called in app.js in a similar way to here:

var config = require('./_config');
var monk = require('monk');
var db = monk(config.mongoURI[app.get('env')]);
API docs

p: To generate the API docs first you have to install apidocsjs

npm install -g apidoc

p: Then run apidoc -i routes/ -o public/Docs to generate the files needed. This takes routes as the input directory and public/Docs as the output directory.

Heading : Smartwatch and Smartphone User Manual

Sub-Heading : Before Getting Started

p: Before downloading the City Data Visualiser ensure that your Android phone is paired with your Wear device.

Sub-Heading : Downloading

p: To download the app, simply click the App Icon on an Android store. This will download and install the City Data Visualiser on your Android phone which will then push the application to your paired Wear devices.

Sub-Heading : Running the City Data Visualiser

p: To start using your newly installed Visualiser just follow these simple steps...

p: Open the app on on your Android phone. You will see a message that confirms that the process has been started. You may now close the phone app.
The app will automatically open on the Wear device after a few seconds, displaying the main menu.
The data will update everytime you enter a new location with the wearable app automatically refreshing.

Sub-Heading : Navigating Around the App

p: The main menu displays an overview to the surrounding pollutant levels.

(MAIN MENU IMAGE)

li: Each icon represents a particular pollutant type with the icon colour indicating its level in your area : RED (high levels), ORANGE (medium levels), GREEN (low levels). Clicking an icon will take you to the corresponding readings page.
If there is no data available for a particular pollutant type its icon will be grey and you will not be able to select it.
Each pollutant will have its own colour-coded rating visible, indicating its level in the surrounding area.

(SCALES IMAGE)

li: Tapping on the pollutant icon at the top of the page will show you the raw data values for each pollutant in the surrounding area.

(RAW DATA IMAGE)

li: On the occasion that a certain pollutant has no collected data, the scale will appear empty and the raw value will be replaced with '-'
To return to the previous page swipe across the screen from left to right.

6.1 : Project Management

Heading: Gantt Chart

p: Here is the gantt chart spanning the breadth of Term 1 and Term 2. As seen from the chart We have split the frontend and backend into individual tasks to be completed in our subteams. The deadlines for the majority of our tasks ended before we have major deliverables or meetings with our client, which allowed us to present updates to our client and request evalutations once we completed components of the system. This scheduling benefitted us a lot as we could get relevant criticism that we could iterate over before subsequent meetings.

Gantt Chart: <iframe src="https://docs.google.com/spreadsheets/d/1qgLVu2SLwC4p-K3zZoywjIE3WDKjXSyaDwKvWfbL2K0/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false"></iframe>

6.2 : Work Packages

Heading : Work Packages 

p: During the initial stages of the project, we decided on dividing the team  based on our preferred roles and where our individual strengths lie. After 

6.3 : Reports

Heading : Bi-weekly Reports

p: Here you can access the Bi-weekly Reports made over the course of COMP204P and COMP205P modules. 

p: The reports are separated by Team and cover the following content:

li: An overview of what the group has done over the last two weeks, highlighting progress, successes and any problems.
A summary of meetings held, including those with the client.
A list of tasks completed, including an estimate of whether the project is running on time.
Highlighted Problems that should be resolved before the next meeting.
The plan for the next two weeks.

Sub-Heading : Team 15

p: Bi-weekly Report 16/10/15
https://docs.google.com/document/d/1wANFFlGew2pwdXGV9yCHckkyaX0nwy3VVj6af9OKaOg/pub

Bi-weekly Report 30/10/15
https://docs.google.com/document/d/1FXMtvkQTZS6_OVbKzRp2UDCXaPvQ0Kz5JALsoeu1PLs/pub

Bi-weekly Report 16/11/15
https://docs.google.com/document/d/1lc1LNIeqC1gr393G3XEaxB5F0VmRflWGAuT8MyYeB10/pub

Bi-weekly Report 27/11/15
https://docs.google.com/document/d/10F8B1KOEl2IyKasMfA8cqa25LmgQAIZgI8Vjv_NUcpY/pub

Bi-weekly Report 11/12/15
https://docs.google.com/document/d/1gFSHIO3bRYUeLx9JFnB3dt8etrdcpYQNZjc6kr_czqo/pub

Bi-weekly Report 29/01/16
https://docs.google.com/document/d/1R6DnBCfyuPCP5ztnV_J0iPoAAZYT9wZZwWU7_kN_P0M/pub

Bi-weekly Report 22/02/16
https://docs.google.com/document/d/1wo9WL5EjGClRJ4MuMDEIKaedDxR17RYkms2pGqrUrwY/pub

Bi-weekly Report 4/03/16
https://docs.google.com/document/d/1MT3RIRBHwAOIYY82yAEpoaqew78zRMlaJ8uLPcXvS_g/pub

Bi-weekly Report 11/03/16
https://docs.google.com/document/d/13_CV5rx7CeBk6jVBMberSIYbzBJIUpyCQ4KiyhJzs3s/pub

Bi-weekly Report 24/03/16
https://docs.google.com/document/d/1-NIASlWCzO4zbeNA5MosBZocSTSTo-iEvp7hrGzVbsw/pub

Sub-Heading : Team 16

p: Bi-weekly Report 16/10/15
https://docs.google.com/document/d/1QrfWD5z-OpL66Jfa5IwvAjXPCyDc3KFTtbQG4EGh-6A/pub

Bi-weekly Report 30/10/15
https://docs.google.com/document/d/1KPsdcBKAiE4XHfVWaX6AJrLqITHwtqIqFpRhRGpTsSo/pub

Bi-weekly Report 16/11/15
https://docs.google.com/document/d/1QrfWD5z-OpL66Jfa5IwvAjXPCyDc3KFTtbQG4EGh-6A/pub

Bi-weekly Report 27/11/15
https://docs.google.com/document/d/1EGVLmAdBl--jC-KAtn1YGRfrCYzJpXweuaw3fR_BqBU/pub

Bi-weekly Report 11/12/15
https://docs.google.com/document/d/1BjT8rYuRi9fvl0Xc8brcEekDtU7mfYIYgb_emK_b-UY/pub

Bi-weekly Report 29/01/16
https://docs.google.com/document/d/1PyeZNbnIBcmcpD89-UpX4vQCwkJKHoX8UcpFNlBjpY8/pub

Bi-weekly Report 22/02/16
https://docs.google.com/document/d/1wytA3yk--h4b4rYuqkvdC3QXQKFEm-TLrApoEcFgwXM/pub

Bi-weekly Report 4/03/16
https://docs.google.com/document/d/1jQVPIGyFNH_44CT5IN2gmQGJIH1VoM6DmpRmWqwTSgI/pub

Bi-weekly Report 11/03/16
https://docs.google.com/document/d/18EMD53kItF_mlsagF6iRQ4unw2lRYPKHB3Ws1XW2J60/pub

Bi-weekly Report 24/03/16
https://docs.google.com/document/d/1jysE8gL5uYltNTHyMNzst4PQ1YkuPKCVtMadW_lLLzM/pub

6.4 : Repositories

Heading : Repositories

p: We have used the following repositories to store varying types of information. The repositories primary use and contributors can be seen in the table below with their respective links.

thead: File System, Link, Function, Owners, Contributors

tr: Google Drive, 
https://drive.google.com/open?id=0B4HqUySXcba1TS15ZnFGMHFNVm8, 
Project Managment file storage, specifically for bi-weekly reports, research topics, video scripts and other such information,
Henry Mortimer,
Madeleine Whitehall, Minqian Wang, Srikrishna Datla

tr: Backend Github Repository,
https://github.com/hennersz/PhyCompBackEnd,
Primary code storage for the backend NodeJS server API development,
Henry Mortimer, 
Srikrishna Datla

tr: Frontend Github Repository,
https://github.com/MingqianWang/SystemEngineeringProjectFrontEnd,
Primary code storage for the frontend smartwatch and smartphone development,
Minqian Wang,
Madeleine Whitehall

Heading : File System

p: For reference, we have included the file storage system for easier understanding of how to access code relevant to your requirements.
Sub-Heading : Frontend File System

p: 

── final
    └── PollutionApp-master
        ├── PollutionApp-master.iml
        ├── build.gradle
        ├── gradle
        │   └── wrapper
        ├── gradle.properties
        ├── gradlew
        ├── gradlew.bat
        ├── local.properties
        ├── mobile
        │   ├── build
        │   ├── build.gradle
        │   ├── mobile.iml
        │   ├── proguard-rules.pro
        │   └── src
        ├── settings.gradle
        └── wear
            ├── build
            ├── build.gradle
            ├── proguard-rules.pro
            ├── src
            └── wear.iml

Sub-Heading : Backend File System

p:
.
├── Procfile //Specifies startup script for running the app like a heroku app only locally
├── README.md
├── _config.js
├── app
│   └── schema.js
├── app.js
├── bin
│   └── www // sets up express app to listen on a port with some error handling code
├── node_modules
├── package.json
├── public
│   ├── Docs
│   ├── images
│   ├── javascripts
│   │   └── maps.js
│   └── stylesheets
│       └── style.css
├── routes
│   ├── api.js
│   └── index.js
├── test
│   └── test-server.js
└── views
    ├── error.jade
    ├── index.jade
    ├── layout.jade
    └── map.jade

7 : Forum

Heading: Forum

p: Welcome to the City Pollution Data Visualisation Proboards page,feel free to join the discussion and contribute towards the project!
(INCLUDE IFRAME)

8 : About-Us

Heading : Meet the Team

p: Our group is composed of 2 teams of 2nd-year Computer Scientists from UCL. 

Sub-Heading: Team 15

tr: Henry Mortimer | henry@morti.plus.com
Roles: Project Lead (Team 15), Client Liaison, Infrastructure Lead

tr: Mingqian Wang | mingqian.wang.14@ucl.ac.uk
Roles: Chief Researcher, Integration Lead, Mobile App Development

Sub-Heading: Team 16

tr: Srikrishna Datla  |  sri_dalta@live.co.uk
Roles: Project Lead (Team 16), Client Liaison, Technical Lead, Database Designer

tr: Madeleine Whitehall  |  madeleinewhitehall@hotmail.co.uk
Roles: User Interface Lead, Chief Researcher, Chief Editor 


Heading : Clients

tr: Intel Collaborative Research Institute
p: Founded in 1968, Intel is one of the largest american multinational manufacturers of a range of advanced internal computer circuitry. Intel has been assisting in this project by providing access to the Intel Smart Citizen API, a multi sensor arduino board that gets the current light, noise and air quality levels from its sensors.

tr: UCL Engineering
p: We have been partnered with the Physical Computing section of the Computer Science Department in UCL, specifically by Dr Nicolai Marquardt and Steven Houben. They are supervising our project and have provided resources such as the smartwatches and the Intel SmartCitizen board as well as guiding us throughout the development of the project in Term 1.

tr: Microsoft Research
p: Microsoft Research is the research division of Microsoft, aiming to be at the forefront of technology and solve difficult real world problems with state of the art technologies.


3 : Collaboration Page - SDK/collaboration opportunities for further development

Heading: Current Development

p: Based on the final requirements we followed, we have implemented the following elements of the system:
p: 

4 : Development Page - Final requirements identified for the final proof of concept, Development plan, iterations and forks in prototypes, Architectural diagrams
Technical achievements, implementation details, use of design patterns
Management of the project including work packages completed between the team members
Testing and evaluation of the product solution


5 : Documentation Page - Referenced materials cited and examples/trials made, System manual and user manual

